#
for (i in 1:length(unique_probes)) {
unique_probe <- unique_probes[i]
hgnc <- c()
print(i)
idx <- which(id_mapping$`AFFY HG U133 Plus 2 probe` == unique_probe)
for (j in 1:length(idx)) {
affy_hgnc <- id_mapping[idx[j],6]
if (!affy_hgnc %in% hgnc)
hgnc <- c(hgnc, affy_hgnc)
}
if (length(hgnc) == 1) {
# https://stackoverflow.com/questions/28467068/add-row-to-dataframe
# hgnc_str <- paste(hgnc, collapse = " /// ")
# hgnc2affy[nrow(hgnc2affy) + 1,] = list(hgnc_str, unique_probe)
hgnc2affy[nrow(hgnc2affy) + 1,] = list(hgnc, unique_probe)
}
}
save.image("./curate_array.RData")
# Now combine via the exact same HGNC and summarize via mean
unique_symbols <- unique(hgnc2affy$HGNC_Symbol)
array_summarized <- array[1,]
array_summarized <- array_summarized[-1,]
collected_rownames <- c()
for (i in 1:length(unique_symbols)) {
print(i)
unique_symbol <- unique_symbols[i]
idx_hgnc2affy <- which(unique_symbol == hgnc2affy$HGNC_Symbol)
probes <- hgnc2affy$AFFY_HG_U133_Plus2_Probe[idx_hgnc2affy]
# collect indices of probes
idx <- c()
for (j in 1:length(probes)) {
probe <- probes[j]
idx <- c(idx, which(probe == rownames(array)))
}
array_summarized[i,] <- colMeans(array[idx,])
collected_rownames <- c(collected_rownames, unique_symbols[i])
}
rownames(array_summarized) <- collected_rownames
save.image("./curate_array.RData")
write.table(x = array_summarized, "GSE32474_series_matrix_curated.txt", col.names = T, row.names = T, sep = "\t")
rm(list = ls(all = TRUE)) # clear all  variables
graphics.off()
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# install.packages("rstudioapi") # run this if it's your first time using it to install
library(rstudioapi) # load it
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print(getwd())
wd <- getwd()
setwd(wd)
lutp = read.table('prot_nci60_mapping.csv',header=TRUE,sep=",", as.is = TRUE, quote="");
idx = duplicated(lutp$Pnumber)
lutp = lutp[!idx,]
d1=read.table('proteinGroups_esc.txt',header=TRUE,sep="\t", as.is = TRUE, quote="");
names(d1) <- gsub("\\.","_", names(d1))
names(d1) <- gsub("__","_", names(d1))
names(d1) <- gsub("__","_", names(d1))
nm=names(d1)
idx = grep("LFQ", names(d1))
nm = names(d1[1,idx])
tmp = sapply(strsplit(nm,"\\_"), "[[",3)
length(intersect(tmp, unique(lutp$Pnumber)))
d2  =d1 [,c(1,idx)]
names(d2)
row.names(d2) = d2$Protein_IDs
d2$Protein_IDs = NULL
head(d2)
names(d2) <- gsub("\\LFQ_intensity_","", names(d2))
head(d2)
## remove all proteins with the "REV_" tag
idx = grep("REV_",  rownames(d2))
d2 = d2[-idx,]
## remove all proteins with the "CON_" tag in it
idx = grep("CON_", rownames(d2))
d2 = d2[-idx,]
head(lutp)
lutp$cell2 = gsub("-", "",lutp$Cellline)
lutp$cell2 = gsub(" ", "",lutp$cell2)
lutp$cell2 = toupper(lutp$cell2)
lutp <- lutp[lutp$Dataset == "full proteome of 59 cell lines",]
head(lutp)
lutp[lutp$cell2 == "MCF7/ADRR",]$cell2 <- "MCF7ADR"
lutp$cell2[which(lutp$cell2 == "786O")] <- "7860"
`%notin%` <- function(x,y) !(x %in% y)
## SR is 2x in the data set -> P001388, P001750
sum(d2$P001388 == 0) # 4536 --> 514 # 4803 --> 525
sum(d2$P001750 == 0) # 5331 # 5597 --> 517 instead of 525
## HOP-92 is 2x in the data set -> P003204, P003364
sum(d2$P003204 == 0) # 4552 --> 514  # 4792 --> 525
sum(d2$P003364 == 0) # 4693 # 4941 --> 525
nin =  c("P001750","P003364") # masking these data sets for later removal
library(tidyverse)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
## PCA with with both SR samples
i1750 <- which(colnames(d2) == "P001750")
i1388 <- which(colnames(d2) == "P001388")
t_d2 <- t(d2)
t_d2 <- t_d2[,apply(t_d2, 2, var, na.rm=TRUE) != 0]
d2.PCA <- prcomp(t_d2, center = F, scale. = T)
groups <- rep("BASIC", 61)
groups[i1750] <- "P001750"
groups[i1388] <- "P001388"
pdf("PCA_Px_BASIC_SR.pdf")
ggbiplot(d2.PCA, labels = rownames(t_d2), var.axes = F, obs.scale = 1, vavar.scale = 1, groups = groups)
dev.off()
## PCA with with both HOP92 samples
i3364 <- which(colnames(d2) == "P003364")
i3204 <- which(colnames(d2) == "P003204")
t_d2 <- t(d2)
t_d2 <- t_d2[,apply(t_d2, 2, var, na.rm=TRUE) != 0]
d2.PCA <- prcomp(t_d2, center = F, scale. = T)
groups <- rep("BASIC", 61)
groups[i3364] <- "P003364"
groups[i3204] <- "P003204"
pdf("PCA_Px_BASIC_HOP92.pdf")
ggbiplot(d2.PCA, labels = rownames(t_d2), var.axes = F, obs.scale = 1, vavar.scale = 1, groups = groups)
dev.off()
xt = read.table('transcr_exp_design.tsv',header=TRUE,sep="\t", as.is = TRUE, quote="", skip = 0);
xt$clt =  sapply(strsplit(xt$cell_linet,"\\_"), "[[",2)
for ( i in 1:(dim(d2)[2])) # add abbreviations CO, BR...etc
{
print(i)
if(names(d2)[i] %notin% nin)
{
idx = which(lutp$Pnumber == names(d2)[i])
idx = which(xt$clt == lutp$cell2[idx[1]]) # cancer type from array data
if(idx>0)
{
names(d2)[i] = paste(xt$cancer2[idx] , xt$clt[idx], sep=".")
}
}#nin
}
d2[-which(names(d2) == "P001750")] -> d2
d2[-which(names(d2) == "P003364")] -> d2
names(d2)[which(names(d2) == "BR.MCF7ADR")] <- "OV.ADRRES"
names(d2)[which(names(d2) == "BR.MDAMB435")] <- "ME.MDAMB435"
rownames(d2) <- gsub("__", "", rownames(d2))
## split by ";" and only take the first entry
rownames(d2) <- gsub(":", "", rownames(d2))
rownames(d2) <- as.character(rownames(d2))
head(rownames(d2))
get_first_name <- function(x) {
return(strsplit(x, ";")[[1]][1])
}
new_rownames <- c()
for (i in 1:length(rownames(d2))) {
new_rownames <- c(new_rownames, get_first_name(rownames(d2)[i]))
}
rownames(d2) <- new_rownames
head(rownames(d2))
write.table(x = d2, "proteinGroups_esc_polished.txt", col.names = T, row.names = T, sep = "\t")
d_log10 <- log10(d2)
write.table(x = d_log10, "proteinGroups_esc_polished_log10.txt", col.names = T, row.names = T, sep = "\t")
cancer.types <- unique(xt$cancer2)
df <- setNames(data.frame(matrix(ncol = 9, nrow = length(rownames(d2)))), cancer.types)
for (cancer.type in cancer.types) {
if (cancer.type == "RE") {
cancer.type <- "RE\\."
}
subs <- d2[,grep(cancer.type, colnames(d2))]
if (cancer.type == "RE\\.") {
cancer.type <- "RE"
}
df[, cancer.type] <- rowSums(subs > 0)
}
marked_lines <- c()
for (line in 1:dim(df)[[1]]) {
l <- df[line,]
if (rowSums(l) == 59) {
marked_lines <- c(marked_lines, line)
}
}
d_final <- d2[marked_lines,]
write.table(x = d_final, "proteinGroups_esc_polished_filtered.txt", col.names = T, row.names = T, sep = "\t")
d_final_log10 <- log10(d_final)
write.table(x = d_final_log10, "proteinGroups_esc_polished_filtered_log10.txt", col.names = T, row.names = T, sep = "\t")
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# http://52.71.54.154/help/course-materials/2015/UseBioconductorFeb2015/A01.5_Annotation.html
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# https://support.bioconductor.org/p/9136239/
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# options(connectionObserver = NULL)
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# write.table(x = d_log10, "proteinGroups_esc_polished_log10_symboles.txt", col.names = T, row.names = T, sep = "\t")
# library(org.Hs.eg.db)
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# write.table(x = d_log10, "proteinGroups_esc_polished_log10_symboles.txt", col.names = T, row.names = T, sep = "\t")
#
# cols <- c("SYMBOL")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# write.table(x = d_log10, "proteinGroups_esc_polished_log10_symboles.txt", col.names = T, row.names = T, sep = "\t")
#
# d_final_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_final_log10), columns = cols, keytype = "IPI")
# d_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# write.table(x = d_log10, "proteinGroups_esc_polished_log10_symboles.txt", col.names = T, row.names = T, sep = "\t")
#
# d_final_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_final_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_final_log10_ipi_to_gene_symbol$IPI)
# duplicated_ipi <- duplicated(d_log10_ipi_to_gene_symbol$IPI)
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# write.table(x = d_log10, "proteinGroups_esc_polished_log10_symboles.txt", col.names = T, row.names = T, sep = "\t")
#
# d_final_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_final_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_final_log10_ipi_to_gene_symbol$IPI)
# d_final_log10_ipi_to_gene_symbol_uniq <- d_final_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# d_log10_ipi_to_gene_symbol_uniq <- d_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# write.table(x = d_log10, "proteinGroups_esc_polished_log10_symboles.txt", col.names = T, row.names = T, sep = "\t")
#
# d_final_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_final_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_final_log10_ipi_to_gene_symbol$IPI)
# d_final_log10_ipi_to_gene_symbol_uniq <- d_final_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_final_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_final_log10)))
# stopifnot(all(d_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_log10)))
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# write.table(x = d_log10, "proteinGroups_esc_polished_log10_symboles.txt", col.names = T, row.names = T, sep = "\t")
#
# d_final_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_final_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_final_log10_ipi_to_gene_symbol$IPI)
# d_final_log10_ipi_to_gene_symbol_uniq <- d_final_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_final_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_final_log10)))
# new_rownames <- paste(d_final_log10_ipi_to_gene_symbol_uniq$IPI, d_final_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# new_rownames <- paste(d_log10_ipi_to_gene_symbol_uniq$IPI, d_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_log10) <- new_rownames
# write.table(x = d_log10, "proteinGroups_esc_polished_log10_symboles.txt", col.names = T, row.names = T, sep = "\t")
#
# d_final_log10_ipi_to_gene_symbol <- select(org.Hs.eg.db, keys=rownames(d_final_log10), columns = cols, keytype = "IPI")
# duplicated_ipi <- duplicated(d_final_log10_ipi_to_gene_symbol$IPI)
# d_final_log10_ipi_to_gene_symbol_uniq <- d_final_log10_ipi_to_gene_symbol[!duplicated_ipi,]
# stopifnot(all(d_final_log10_ipi_to_gene_symbol_uniq$IPI == rownames(d_final_log10)))
# new_rownames <- paste(d_final_log10_ipi_to_gene_symbol_uniq$IPI, d_final_log10_ipi_to_gene_symbol_uniq$SYMBOL, sep = "_")
# rownames(d_final_log10) <- new_rownames
#### ENDING CURATION ####
#### ENDING CURATION ####
#### ENDING CURATION ####
#### ENDING CURATION ####
#### ENDING CURATION ####
#### ENDING CURATION ####
#### ENDING CURATION ####
#### ENDING CURATION ####
rm(list = ls(all = TRUE)) # clear all  variables
graphics.off()
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# install.packages("rstudioapi") # run this if it's your first time using it to install
library(rstudioapi) # load it
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print(getwd())
wd <- getwd()
library(recount)
library(reshape2)
library(ggplot2)
library(DESeq2)
load("../recount2_tcga_data_2021-22-04/rse_gene_colorectal.Rdata")
dim(colData(rse_gene))
head(assay(rse_gene))
head(colData(rse_gene)$gdc_cases.submitter_id)
rse_gene@colData@rownames <- paste(colData(rse_gene)$gdc_cases.submitter_id,"id",1:dim(colData(rse_gene))[1],sep="_")
head(rse_gene@colData@rownames)
new_name = data.frame(elementMetadata(rse_gene))
row.names(rse_gene) <- paste(new_name[,1],new_name[,3],sep="_")
head(assay(rse_gene))
#check coldata with useful info
m = data.frame(colData(rse_gene))
m = m[colSums(!is.na(m)) > 0]
m1 = m[,grepl("gdc_cases.submitter_id|sample_type|primary_site|gender|race|disease_type|tumor|risk_factors|tissue",names(m))]
head(m1)
rm(m,new_name)
rse_gene <- scale_counts(rse_gene)
# load(file = ".RData")
# remove NA values in Metadata by removing the actual samples
rse_gene <- rse_gene[,-which(is.na(m1$gdc_cases.demographic.gender))]
m1 <- m1[-which(is.na(m1$gdc_cases.demographic.gender)),]
# only keep "Primary Tumor" and "Solid Tissue Normal"
rse_gene <- rse_gene[, m1$gdc_cases.samples.sample_type == "Primary Tumor" | m1$gdc_cases.samples.sample_type == "Solid Tissue Normal"]
m1 <- m1[m1$gdc_cases.samples.sample_type == "Primary Tumor" | m1$gdc_cases.samples.sample_type == "Solid Tissue Normal",]
# xml_tumor_tissue_site "Colon" only
colon_only <- m1$xml_tumor_tissue_site == "Colon"
colon_only[is.na(colon_only)] <- FALSE
rse_gene <- rse_gene[, colon_only]
m1 <- m1[colon_only,]
## Primary Tumor
sum(m1$gdc_cases.samples.sample_type == "Primary Tumor") # 500
## Solid Tissue Normal
sum(m1$gdc_cases.samples.sample_type == "Solid Tissue Normal") # 41
coSE <- DESeqDataSet(rse_gene, design = ~gdc_cases.demographic.gender + gdc_cases.demographic.race + gdc_cases.samples.sample_type)
# coSE <- DESeqDataSet(rse_gene, design = ~gdc_cases.samples.sample_type + gdc_cases.demographic.gender)
coSE$gdc_cases.samples.sample_type <- factor(coSE$gdc_cases.samples.sample_type, levels = c("Solid Tissue Normal","Primary Tumor"))
coSE <- DESeq(coSE, parallel = F)
#clean up
rm(list = ls(all = TRUE)) # clear all variables
graphics.off()
# install.packages("rstudioapi") # run this if it's your first time using it to install
library(rstudioapi) # load it
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print(getwd())
wd <- getwd()
library(recount)
library(reshape2)
library(ggplot2)
library(DESeq2)
library(BiocParallel)
load("../recount2_tcga_data_2021-22-04/rse_gene_skin.Rdata")
dim(colData(rse_gene))
head(assay(rse_gene))
head(colData(rse_gene)$gdc_cases.submitter_id)
rse_gene@colData@rownames <- paste(colData(rse_gene)$gdc_cases.submitter_id,"id",1:dim(colData(rse_gene))[1],sep="_")
head(rse_gene@colData@rownames)
new_name = data.frame(elementMetadata(rse_gene))
row.names(rse_gene) <- paste(new_name[,1],new_name[,3],sep="_")
head(assay(rse_gene))
#check coldata with useful info
m = data.frame(colData(rse_gene))
m = m[colSums(!is.na(m)) > 0]
m1 = m[,grepl("gdc_cases.submitter_id|sample_type|primary_site|gender|race|disease_type|tumor|risk_factors|tissue",names(m))]
head(m1)
rm(m,new_name)
# load(file = ".RData")
# remove NA values in Metadata by removing the actual samples
if (length(which(is.na(m1$gdc_cases.demographic.gender))) > 0) {
rse_gene <- rse_gene[,-which(is.na(m1$gdc_cases.demographic.gender))]
m1 <- m1[-which(is.na(m1$gdc_cases.demographic.gender)),]
}
rse_gene <- scale_counts(rse_gene)
# only keep "Primary Tumor" and "Solid Tissue Normal"
rse_gene <- rse_gene[, m1$gdc_cases.samples.sample_type == "Primary Tumor" | m1$gdc_cases.samples.sample_type == "Solid Tissue Normal"]
m1 <- m1[m1$gdc_cases.samples.sample_type == "Primary Tumor" | m1$gdc_cases.samples.sample_type == "Solid Tissue Normal",]
## Primary Tumor
sum(m1$gdc_cases.samples.sample_type == "Primary Tumor") # 103
## Solid Tissue Normal
sum(m1$gdc_cases.samples.sample_type == "Solid Tissue Normal") # 1
#clean up
rm(list = ls(all = TRUE)) # clear all variables
graphics.off()
# install.packages("rstudioapi") # run this if it's your first time using it to install
library(rstudioapi) # load it
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print(getwd())
wd <- getwd()
library(recount)
library(reshape2)
library(ggplot2)
library(DESeq2)
load("../recount2_tcga_data_2021-22-04/rse_gene_kidney.Rdata")
dim(colData(rse_gene))
head(assay(rse_gene))
head(colData(rse_gene)$gdc_cases.submitter_id)
rse_gene@colData@rownames <- paste(colData(rse_gene)$gdc_cases.submitter_id,"id",1:dim(colData(rse_gene))[1],sep="_")
head(rse_gene@colData@rownames)
new_name = data.frame(elementMetadata(rse_gene))
row.names(rse_gene) <- paste(new_name[,1],new_name[,3],sep="_")
head(assay(rse_gene))
#check coldata with useful info
m = data.frame(colData(rse_gene))
m = m[colSums(!is.na(m)) > 0]
m1 = m[,grepl("gdc_cases.submitter_id|sample_type|primary_site|gender|race|disease_type|tumor|risk_factors|tissue",names(m))]
head(m1)
rm(m,new_name)
# load(file = ".RData")
# remove NA values in Metadata by removing the actual samples
if (length(which(is.na(m1$gdc_cases.demographic.gender))) > 0) {
rse_gene <- rse_gene[,-which(is.na(m1$gdc_cases.demographic.gender))]
m1 <- m1[-which(is.na(m1$gdc_cases.demographic.gender)),]
}
rse_gene <- scale_counts(rse_gene)
# only keep "Primary Tumor" and "Solid Tissue Normal"
rse_gene <- rse_gene[, m1$gdc_cases.samples.sample_type == "Primary Tumor" | m1$gdc_cases.samples.sample_type == "Solid Tissue Normal"]
m1 <- m1[m1$gdc_cases.samples.sample_type == "Primary Tumor" | m1$gdc_cases.samples.sample_type == "Solid Tissue Normal",]
## Primary Tumor
sum(m1$gdc_cases.samples.sample_type == "Primary Tumor") # 899
## Solid Tissue Normal
sum(m1$gdc_cases.samples.sample_type == "Solid Tissue Normal") # 129
# xml_tumor_tissue_site "Kidney" only
re_only <- m1$xml_tumor_tissue_site == "Kidney"
re_only[is.na(re_only)] <- FALSE
rse_gene <- rse_gene[, re_only]
m1 <- m1[re_only,]
coSE <- DESeqDataSet(rse_gene, design = ~gdc_cases.demographic.gender + gdc_cases.demographic.race + gdc_cases.samples.sample_type)
# coSE <- DESeqDataSet(rse_gene, design = ~gdc_cases.samples.sample_type)
coSE$gdc_cases.samples.sample_type <- factor(coSE$gdc_cases.samples.sample_type, levels = c("Solid Tissue Normal","Primary Tumor"))
coSE <- DESeq(coSE)
res05 <- results(coSE, alpha=0.05, lfcThreshold = 2, contrast = c("gdc_cases.samples.sample_type", "Primary Tumor", "Solid Tissue Normal"))
res05 <- subset(res05, select = -c(stat, lfcSE, baseMean))
res05 <- res05[!is.na(res05$padj),]
res05 <- res05[res05$padj < 0.05,]# 2166
gene_names <- c()
for (i in 1:length(res05$padj)) {
ens <- rownames(res05)[i]
gene_name <- strsplit(ens, "_")[[1]][2]
gene_names <- c(gene_names, gene_name)
}
res05$gene_name <- gene_names
write.table(res05, "renal_sig_0.05_FC2.tsv", append = F, quote = F, sep = "\t", dec = ".")
res <- results(coSE, contrast = c("gdc_cases.samples.sample_type", "Primary Tumor", "Solid Tissue Normal"))
res <- subset(res, select = -c(stat, lfcSE, baseMean))
gene_names <- c()
for (i in 1:length(res$padj)) {
ens <- rownames(res)[i]
gene_name <- strsplit(ens, "_")[[1]][2]
gene_names <- c(gene_names, gene_name)
}
res$gene_name <- gene_names
write.table(res, "renal_DESeq2.tsv", append = F, quote = F, sep = "\t", dec = ".")
vsd <- vst(coSE, blind=FALSE)
norm_vals <- assay(vsd)
write.table(norm_vals, "vst_transformed_renal.read.counts.tsv", append = F, quote = F, sep = "\t", dec = ".")
