print(fn)
d1 = read.table(fn,  header = T,sep = "\t",na.strings =c("","NaN"),quote=NULL,
stringsAsFactors=F,dec=".",fill=TRUE, as.is = T, check.names=FALSE)
d1$srt = d1$WID = d1$receptor = NULL
if(i==1)
{BG = d1}
else{
BG = merge(BG,d1, x.by = "receptor_esc", y.by ="receptor_esc")
}
}
setwd(wd)
idx = grep("wk2|wk1",names(BG))
names(BG)[idx]
BG = BG[, idx]
names(BG)[names(BG) == "786_O_wk1"] <- "X786_wk1"
names(BG)[names(BG) == "786_O_wk2"] <- "X786_wk2"
rownames(BG) <- d1$receptor_esc
rownames(BG) <- d1$receptor_esc
library("ggpubr")
output <- matrix(ncol = 4, nrow = 0)
even_cols <- seq(2, ncol(BG), by = 2)
for (even_col in even_cols) {
# test both cols with shapiro and scream if they should be normally distributed!
shap1 <- shapiro.test(BG[,even_col])
stopifnot(shap1$p.value < 0.01)
shap2 <- shapiro.test(BG[,even_col - 1])
stopifnot(shap2$p.value < 0.01)
cell_line <- colnames(BG)[even_col - 1]
#cell_line <- gsub("\\_wk1","", cell_line)
cell_line <- gsub("MFI\\_","", cell_line)
if (cell_line == "786_O_wk1") {
print("SHFLSDJHK")
cell_line <- "786_wk1"
}
pdf(paste(cell_line, "corr_spearman_wk1_vs_wk2.pdf", sep = "_"))
print(ggscatter(BG, x = colnames(BG)[even_col - 1], y = colnames(BG)[even_col],
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "wk1", ylab = "wk2", main = paste("Correllation test of ", cell_line, " week 1 versus week 2")))
dev.off()
# https://statisticsbyjim.com/basics/correlations/
res <-cor.test(BG[,even_col - 1], BG[,even_col],  method = "spearman", exact = F)
log2_FC <- log2(BG[,even_col]) - log2(BG[,even_col - 1])
d2 <- as.data.frame(log2_FC)
rownames(d2) <- rownames(BG)
colnames(d2) <- c(paste(cell_line, "_wk1_vs_wk2_log2FC", sep = ""))
write.table(d2, paste(cell_line, "_wk1_vs_wk2_log2FC.tsv", sep = ""), sep = "\t")
# table with cell line name, r-value, p-value, number of log2FCs greater |2|
output <- rbind(output, c(cell_line, as.numeric(res$estimate), res$p.value, sum(log2_FC < -2 | log2_FC > 2)))
#print(sum(log2_FC < -0.5 | log2_FC > 0.5))
#print(sum(log2_FC < -2 | log2_FC > 2))
#print("#")
#Sys.sleep(2)
}
output <- as.data.frame(output)
colnames(output) <- c("cell_line", "rho", "p-value", "number_of_|log2FC|>2")
write.table(output, "wk1_vs_wk2_correlation_log2FC_analysis.tsv",sep = "\t", row.names = F)
rm(list = ls(all = TRUE)) # clear all  variables
graphics.off()
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# install.packages("rstudioapi") # run this if it's your first time using it to install
library(rstudioapi) # load it
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print(getwd())
wd <- getwd()
setwd(wd)
setwd(paste (wd,'/lists_tsv/',sep=""))    # assumes this subfolder exists and contains the protein summaries
files_m <- dir()    # get the filenames
BG = NULL
for (i in 1:length(files_m))   # loop through files
{
fn = files_m[i];
print(fn)
d1 = read.table(fn,  header = T,sep = "\t",na.strings =c("","NaN"),quote=NULL,
stringsAsFactors=F,dec=".",fill=TRUE, as.is = T, check.names=FALSE)
d1$srt = d1$WID = d1$receptor = NULL
if(i==1)
{BG = d1}
else{
BG = merge(BG,d1, x.by = "receptor_esc", y.by ="receptor_esc")
}
}
setwd(wd)
write.table(BG, file = "all_facs.tmp.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
idx = grep("wk2",names(BG))
names(BG)[idx]
BG = BG[, -idx]
d1 = BG
names(d1) <- gsub("\\_wk1","", names(d1))
names(d1) <- gsub("X786_O","786_O", names(d1))
x = read.table('facs_exp_design_extended.csv',header=TRUE,sep="\t", as.is = TRUE, quote="", skip = 0, check.names=FALSE);
idx = grep ("wk2", x$sample_name)
x=x[-idx,]
x$sample_name <- gsub("\\_wk1","", x$sample_name)
x$comb_sn =  paste(x$cancer_type2, x$sample_name, sep=".")
names(d1) =  gsub("\\NCI_","", names(d1))
setdiff(names(d1), x$sample_name)
for ( i in 2:(dim(d1)[2])) # add abbreviations CO, BR...etc
{
idx = which(x$sample_name == names(d1)[i])
names(d1)[i] = x$comb_sn[idx]
}
names(d1)
row.names( d1 )  = d1$receptor_esc
d1$receptor_esc = NULL
names(d1) = gsub("\\_","", names(d1))
facs = d1
rownames(facs) <- gsub(" |_|-|\\.|/|,|\\(|)", "", rownames(facs))
rownames_to_remove <- rownames(facs)[grepl("AH|kappa",rownames(facs))]
rownames_to_remove_number <- which(row.names(facs) %in% rownames_to_remove)
facs <- facs[-rownames_to_remove_number,]
## correction of names in facs
names(facs)[names(facs) == "CO.MFIHCT15"] <- "CO.HCT15"
names(facs)[names(facs) == "LC.MFIH23"] <- "LC.H23"
names(facs)[names(facs) == "LE.HL60(TB)"] <- "LE.HL60"
names(facs)[names(facs) == "OV.NCI/ADRRES"] <- "OV.ADRRES"
names(facs)[names(facs) == "RE.786O"] <- "RE.7860"
names(facs)
write.table(facs, "FACS_no_ICS_March2022.tsv", sep = "\t")
xt = read.table('transcr_exp_design.tsv',header=TRUE,sep="\t", as.is = TRUE, quote="", skip = 0);
xt$clt =  sapply(strsplit(xt$cell_linet,"\\_"), "[[",2)
td2 = read.table('../Curate_ArrayData_April2021/GSE32474_series_matrix_curated.txt',header=TRUE,sep="\t", as.is = TRUE, skip = 0);
td2 = read.table('../Curate_ArrayData_April2022/GSE32474_series_matrix_curated.txt',header=TRUE,sep="\t", as.is = TRUE, skip = 0);
td=td2
nm = names(td)
kix =  sapply(strsplit(nm,"\\_"), "[[",1)
length(unique(kix))
kix = (intersect(kix, xt$code))
names(td) =   sapply(strsplit(names(td),"\\_"), "[[",1)
td =subset(td, select = kix)
head(td)
for ( i in 1:(dim(td)[2])) # add abbreviations CO, BR...etc
{
idx = which(xt$code == names(td)[i])
names(td)[i] = paste( xt$cancer2[idx], xt$clt[idx], sep=".")
}
length(intersect(names(facs), names(td)))
setdiff(names(facs), names(td))
## correction of names in td
names(td)[names(td) == "BR.MDAMB435"] <- "ME.MDAMB435"
names(td)[names(td) == "BR.MCF7ADR"] <- "OV.ADRRES"
setdiff(names(facs), names(td)) # only BR.MDAMB468 allowed!
setwd(wd)
lutp = read.table('prot_nci60_mapping.csv',header=TRUE,sep=",", as.is = TRUE, quote="");
idx = duplicated(lutp$Pnumber)
lutp = lutp[!idx,]
#### NEW FILTERED DATA HERE ####
d1=read.table("../Curate_Px_April2021/proteinGroups_esc_polished_filtered_log10.txt",header=TRUE,sep="\t", as.is = TRUE, check.names = F);
rm(list = ls(all = TRUE)) # clear all  variables
graphics.off()
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# install.packages("rstudioapi") # run this if it's your first time using it to install
library(rstudioapi) # load it
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print(getwd())
wd <- getwd()
setwd(wd)
setwd(paste (wd,'/lists_tsv/',sep=""))    # assumes this subfolder exists and contains the protein summaries
files_m <- dir()    # get the filenames
BG = NULL
for (i in 1:length(files_m))   # loop through files
{
fn = files_m[i];
print(fn)
d1 = read.table(fn,  header = T,sep = "\t",na.strings =c("","NaN"),quote=NULL,
stringsAsFactors=F,dec=".",fill=TRUE, as.is = T, check.names=FALSE)
d1$srt = d1$WID = d1$receptor = NULL
if(i==1)
{BG = d1}
else{
BG = merge(BG,d1, x.by = "receptor_esc", y.by ="receptor_esc")
}
}
setwd(wd)
write.table(BG, file = "all_facs.tmp.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
idx = grep("wk2",names(BG))
names(BG)[idx]
BG = BG[, -idx]
d1 = BG
names(d1) <- gsub("\\_wk1","", names(d1))
names(d1) <- gsub("X786_O","786_O", names(d1))
x = read.table('facs_exp_design_extended.csv',header=TRUE,sep="\t", as.is = TRUE, quote="", skip = 0, check.names=FALSE);
idx = grep ("wk2", x$sample_name)
x=x[-idx,]
x$sample_name <- gsub("\\_wk1","", x$sample_name)
x$comb_sn =  paste(x$cancer_type2, x$sample_name, sep=".")
names(d1) =  gsub("\\NCI_","", names(d1))
setdiff(names(d1), x$sample_name)
for ( i in 2:(dim(d1)[2])) # add abbreviations CO, BR...etc
{
idx = which(x$sample_name == names(d1)[i])
names(d1)[i] = x$comb_sn[idx]
}
names(d1)
row.names( d1 )  = d1$receptor_esc
d1$receptor_esc = NULL
names(d1) = gsub("\\_","", names(d1))
facs = d1
rownames(facs) <- gsub(" |_|-|\\.|/|,|\\(|)", "", rownames(facs))
rownames_to_remove <- rownames(facs)[grepl("AH|kappa",rownames(facs))]
rownames_to_remove_number <- which(row.names(facs) %in% rownames_to_remove)
facs <- facs[-rownames_to_remove_number,]
## correction of names in facs
names(facs)[names(facs) == "CO.MFIHCT15"] <- "CO.HCT15"
names(facs)[names(facs) == "LC.MFIH23"] <- "LC.H23"
names(facs)[names(facs) == "LE.HL60(TB)"] <- "LE.HL60"
names(facs)[names(facs) == "OV.NCI/ADRRES"] <- "OV.ADRRES"
names(facs)[names(facs) == "RE.786O"] <- "RE.7860"
names(facs)
write.table(facs, "FACS_no_ICS_April2022.tsv", sep = "\t")
xt = read.table('transcr_exp_design.tsv',header=TRUE,sep="\t", as.is = TRUE, quote="", skip = 0);
xt$clt =  sapply(strsplit(xt$cell_linet,"\\_"), "[[",2)
td2 = read.table('../Curate_ArrayData_April2022/GSE32474_series_matrix_curated.txt',header=TRUE,sep="\t", as.is = TRUE, skip = 0);
td=td2
nm = names(td)
kix =  sapply(strsplit(nm,"\\_"), "[[",1)
length(unique(kix))
kix = (intersect(kix, xt$code))
names(td) =   sapply(strsplit(names(td),"\\_"), "[[",1)
td =subset(td, select = kix)
head(td)
for ( i in 1:(dim(td)[2])) # add abbreviations CO, BR...etc
{
idx = which(xt$code == names(td)[i])
names(td)[i] = paste( xt$cancer2[idx], xt$clt[idx], sep=".")
}
length(intersect(names(facs), names(td)))
setdiff(names(facs), names(td))
## correction of names in td
names(td)[names(td) == "BR.MDAMB435"] <- "ME.MDAMB435"
names(td)[names(td) == "BR.MCF7ADR"] <- "OV.ADRRES"
setdiff(names(facs), names(td)) # only BR.MDAMB468 allowed!
setwd(wd)
lutp = read.table('prot_nci60_mapping.csv',header=TRUE,sep=",", as.is = TRUE, quote="");
idx = duplicated(lutp$Pnumber)
lutp = lutp[!idx,]
#### NEW FILTERED DATA HERE ####
d1=read.table("../Curate_Px_April2022/proteinGroups_esc_polished_filtered_log10.txt",header=TRUE,sep="\t", as.is = TRUE, check.names = F);
d2 <- d1
intersect(names(facs), names(d2))
length(intersect(names(facs), names(d2)))
setdiff(names(facs), names(d2)) # only "BR.MDAMB468" should appear here!!!
###################################################
### code chunk number 1: style
###################################################
BiocStyle::latex(bibstyle="unsrt")
###################################################
### code chunk number 2: load_lib_data
###################################################
library(omicade4)
data(NCI60_4arrays)
names(NCI60_4arrays)
NCI60_4arrays$hgu133p2 <- NCI60_4arrays$hgu133<- NCI60_4arrays$hgu95 <- NULL
NCI60_4arrays$FACS = facs
cmn = intersect(names(facs), names(d2))
idx = grep("LOX", cmn)
cmn = cmn[-idx]
d2 = subset(d2, select = cmn)
NCI60_4arrays$Px = d2
NCI60_4arrays$FACS = subset(NCI60_4arrays$FACS, select = cmn)
NCI60_4arrays$Tx = td
NCI60_4arrays$Tx = subset(NCI60_4arrays$Tx, select = cmn)
NCI60_4arrays$Px = NULL
NCI60_4arrays$FACS = NULL
NCI60_4arrays$Tx = NULL
NCI60_4arrays$Tx = td
NCI60_4arrays$Tx = subset(NCI60_4arrays$Tx, select = cmn)
NCI60_4arrays$Px = d2
NCI60_4arrays$FACS = facs
NCI60_4arrays$FACS = subset(NCI60_4arrays$FACS, select = cmn)
NCI60_4arrays$agilent <-NULL
sapply(NCI60_4arrays, dim)
###################################################
### code chunk number 4: Check_col_order
###################################################
all(apply((x <- sapply(NCI60_4arrays, colnames))[,-1], 2, function(y)
identical(y, x[,1])))
###################################################
### code chunk number 5: cluster_data_separately
###################################################
library(amap)
library(dendextend)
library(RColorBrewer)
png("dend_spearman.png", height = 1500, width = 1500, pointsize = 15, res = 144)
layout(matrix(1:3, 1, 3))
par(mar=c(7, 1, 0.1, 7))
old_names <- names(NCI60_4arrays)
names(NCI60_4arrays) <- c("Tx", "Px", "FACS")
for (i in 1:length(NCI60_4arrays)) {
df <- NCI60_4arrays[[i]]
df_n <- names(NCI60_4arrays[i])
d <- Dist(t(df), method = "spearman")
print(d)
hcl <- hclust(d, method = "ward.D2")
dend <- as.dendrogram(hcl)
# https://stackoverflow.com/questions/33683862/first-entry-from-string-split
colors_to_use <- sapply(strsplit(colnames(df), "\\."), `[`, 1)
unique_colors <- unique(colors_to_use)
color_numbers <- brewer.pal(n = 9, name = 'Set1')
names(color_numbers)=unique_colors
final_color_vec <- color_numbers[colors_to_use]
final_color_vec <- final_color_vec[order.dendrogram(dend)]
labels_colors(dend) <- final_color_vec
plot(dend, horiz=TRUE, xlab = df_n)
}
dev.off()
svg("dend_spearman.svg", height = 10, width = 10)
layout(matrix(1:3, 1, 3))
par(mar=c(7, 1, 0.1, 7))
for (i in 1:length(NCI60_4arrays)) {
df <- NCI60_4arrays[[i]]
df_n <- names(NCI60_4arrays[i])
d <- Dist(t(df), method = "spearman")
print(d)
hcl <- hclust(d, method = "ward.D2")
dend <- as.dendrogram(hcl)
# https://stackoverflow.com/questions/33683862/first-entry-from-string-split
colors_to_use <- sapply(strsplit(colnames(df), "\\."), `[`, 1)
unique_colors <- unique(colors_to_use)
color_numbers <- brewer.pal(n = 9, name = 'Set1')
names(color_numbers)=unique_colors
final_color_vec <- color_numbers[colors_to_use]
final_color_vec <- final_color_vec[order.dendrogram(dend)]
labels_colors(dend) <- final_color_vec
plot(dend, horiz=TRUE, xlab = df_n)
}
dev.off()
pdf("dend_spearman.pdf", height = 10, width = 10)
layout(matrix(1:3, 1, 3))
par(mar=c(7, 1, 0.1, 7))
for (i in 1:length(NCI60_4arrays)) {
df <- NCI60_4arrays[[i]]
df_n <- names(NCI60_4arrays[i])
d <- Dist(t(df), method = "spearman")
print(d)
hcl <- hclust(d, method = "ward.D2")
dend <- as.dendrogram(hcl)
# https://stackoverflow.com/questions/33683862/first-entry-from-string-split
colors_to_use <- sapply(strsplit(colnames(df), "\\."), `[`, 1)
unique_colors <- unique(colors_to_use)
color_numbers <- brewer.pal(n = 9, name = 'Set1')
names(color_numbers)=unique_colors
final_color_vec <- color_numbers[colors_to_use]
final_color_vec <- final_color_vec[order.dendrogram(dend)]
labels_colors(dend) <- final_color_vec
plot(dend, horiz=TRUE, xlab = df_n)
}
dev.off()
###################################################
### code chunk number 6: MCIA
###################################################
mcoin <- mcia(NCI60_4arrays, cia.nf=10)
class(mcoin)
###################################################
### code chunk number 7: get_cancertype
###################################################
cancer_type <- colnames(NCI60_4arrays$Tx)
cancer_type <- sapply(strsplit(cancer_type, split="\\."), function(x) x[1])
cancer_type
###################################################
### code chunk number 8: plot_mcia_cancertype
###################################################
library(lattice)
source("my_omicade4.R")
# trellis.device(device="png", filename="no_lox_1.png", width=1500, height=1500)
png("mcia.png", height = 1500, width = 1500, pointsize = 15, res = 144)
my.plot.mcia(mcoin, axes=1:2, phenovec=cancer_type, sample.lab=F, df.color=1:3)
dev.off()
svg("mcia.svg",width=10,height=10)
my.plot.mcia(mcoin, axes=1:2, phenovec=cancer_type, sample.lab=FALSE, df.color=1:3)
dev.off()
pdf("mcia.pdf",width=10,height=10)
my.plot.mcia(mcoin, axes=1:2, phenovec=cancer_type, sample.lab=FALSE, df.color=1:3)
dev.off()
#head(colon)
###################################################
### code chunk number 10: plot_mcia_axes
###################################################
plot(mcoin, axes=c(1, 2), phenovec=cancer_type, sample.lab=F, df.color=1:3, sample.legend = T)
png("mcia_axes_1,2_June2021.png", height = 1500, width = 2000, pointsize = 15, res = 144)
my.plot.mcia(mcoin, axes=c(1, 2), phenovec=cancer_type, sample.lab=T, df.color=1:3)
dev.off()
plot(mcoin, axes=c(1, 3), phenovec=cancer_type, sample.lab=T, df.color=1:3)
png("mcia_axes_1,3_June2021.png", height = 1500, width = 2000, pointsize = 15, res = 144)
my.plot.mcia(mcoin, axes=c(1, 3), phenovec=cancer_type, sample.lab=T, df.color=1:3)
dev.off()
plot(mcoin, axes=c(2, 3), phenovec=cancer_type, sample.lab=FALSE, df.color=1:3)
plot(mcoin, axes=c(1, 4), phenovec=cancer_type, sample.lab=FALSE, df.color=1:3, )
## S3 method for class 'mcia'
top5_axis1 <- topVar(mcoin, axis = 1, end = "both", topN = 5)
write.table(top5_axis1, file = "facs_schindler_multiomics_top10_hits_x_axis.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
top5_axis2 <- topVar(mcoin, axis = 2, end = "both", topN = 5)
write.table(top5_axis2, file = "facs_schindler_multiomics_top10_hits_y_axis.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
top10 <- c(as.character(unlist(top5_axis1)), as.character(unlist(top5_axis2)))
png("facs_schindler_multiomics_mcia_top10_filtered.png", height = 1500, width = 1500, pointsize = 15, res = 144)
plotVar(mcoin, var=top10, var.lab=TRUE, sepID.data=4, sepID.sep="\\.")
dev.off()
svg("facs_schindler_multiomics_mcia_top10_filtered.svg", height = 10, width = 10)
plotVar(mcoin, var=top10, var.lab=TRUE, sepID.data=4, sepID.sep="\\.")
dev.off()
top10_axis1 <- topVar(mcoin, axis = 1, end = "both", topN = 10)
write.table(top10_axis1, file = "facs_schindler_multiomics_top20_hits_x_axis.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
top10_axis2 <- topVar(mcoin, axis = 2, end = "both", topN = 10)
write.table(top10_axis2, file = "facs_schindler_multiomics_top20_hits_y_axis.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
top20 <- c(as.character(unlist(top10_axis1)), as.character(unlist(top10_axis2)))
png("facs_schindler_multiomics_mcia_top20_filtered.png", height = 1500, width = 1500, pointsize = 15, res = 144)
plotVar(mcoin, var=top20, var.lab=TRUE, sepID.data=4, sepID.sep="\\.")
dev.off()
svg("facs_schindler_multiomics_mcia_top20_filtered.svg", height = 10, width = 10)
plotVar(mcoin, var=top20, var.lab=TRUE, sepID.data=4, sepID.sep="\\.")
dev.off()
top20_axis1_positive <- topVar(mcoin, axis = 1, end = "positive", topN = 20)
write.table(top10_axis1, file = "facs_schindler_multiomics_top20_hits_x_axis_positive.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
png("facs_schindler_multiomics_mcia_top20_filtered_positive.png", height = 1500, width = 1500, pointsize = 15, res = 144)
plotVar(mcoin, var=as.character(unlist(top20_axis1_positive)), var.lab=TRUE, sepID.data=4, sepID.sep="\\.")
dev.off()
svg("facs_schindler_multiomics_mcia_top20_filtered_positive.svg", height = 10, width = 10)
plotVar(mcoin, var=as.character(unlist(top20_axis1_positive)), var.lab=TRUE, sepID.data=4, sepID.sep="\\.")
dev.off()
colon <- selectVar(mcoin, a1.lim=c(-1, -0.4), a2.lim=c(-1, -0.38))
colon <- colon[colon$FACS,]
write.table(colon, file = "facs_schindler_multiomics_colon_hits.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
png("facs_schindler_multiomics_mcia_colon.png", height = 1500, width = 1500, pointsize = 15, res = 144)
plotVar(mcoin, var=as.character(unlist(colon)), var.lab=F)
dev.off()
svg("facs_schindler_multiomics_mcia_colon.svg", height = 10, width = 10)
plotVar(mcoin, var=as.character(unlist(colon)), var.lab=F)
dev.off()
leuk <- selectVar(mcoin, a1.lim=c(-Inf, -1), a2.lim=c(0, Inf))
leuk <- leuk[leuk$FACS,]
write.table(leuk, file = "facs_schindler_multiomics_leuk_hits.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
png("facs_schindler_multiomics_mcia_leuk.png", height = 1500, width = 1500, pointsize = 15, res = 144)
plotVar(mcoin, var=as.character(unlist(leuk)), var.lab=F)
dev.off()
svg("facs_schindler_multiomics_mcia_leuk.svg", height = 10, width = 10)
plotVar(mcoin, var=as.character(unlist(leuk)), var.lab=F)
dev.off()
me <- selectVar(mcoin, a1.lim=c(-0.25, 0.15), a2.lim=c(0.5, Inf))
me <- me[me$FACS,]
write.table(me, file = "facs_schindler_multiomics_me_hits.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
png("facs_schindler_multiomics_mcia_me.png", height = 1500, width = 1500, pointsize = 15, res = 144)
plotVar(mcoin, var=as.character(unlist(me)), var.lab=F)
dev.off()
svg("facs_schindler_multiomics_mcia_me.svg", height = 10, width = 10)
plotVar(mcoin, var=as.character(unlist(me)), var.lab=F)
dev.off()
cns <- selectVar(mcoin, a1.lim=c(0.3, Inf), a2.lim=c(0.5, Inf))
cns <- cns[cns$FACS,]
write.table(cns, file = "facs_schindler_multiomics_cns_hits.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
png("facs_schindler_multiomics_mcia_cns.png", height = 1500, width = 1500, pointsize = 15, res = 144)
plotVar(mcoin, var=as.character(unlist(cns)), var.lab=F)
dev.off()
svg("facs_schindler_multiomics_mcia_cns.svg", height = 10, width = 10)
plotVar(mcoin, var=as.character(unlist(cns)), var.lab=F)
dev.off()
re <- selectVar(mcoin, a1.lim=c(0.25, Inf), a2.lim=c(-Inf, -0.5))
re <- re[re$FACS,]
write.table(re, file = "facs_schindler_multiomics_re_hits.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
png("facs_schindler_multiomics_mcia_re.png", height = 1500, width = 1500, pointsize = 15, res = 144)
plotVar(mcoin, var=as.character(unlist(re)), var.lab=F)
dev.off()
svg("facs_schindler_multiomics_mcia_re.svg", height = 10, width = 10)
plotVar(mcoin, var=as.character(unlist(re)), var.lab=F)
dev.off()
harmonized_ids <- read.table("../Homogenize_Identifiers/harmonized_final.ids.csv", header = T, sep = "\t")
harmonized_ids$receptor_esc <- gsub(" |_|-|\\.|/|,|\\(|)", "", harmonized_ids$receptor_esc)
leuk_gene <- merge(harmonized_ids, leuk, by.x = "receptor_esc", by.y = "var")
leuk_gene <- leuk_gene[, names(leuk_gene) %in% c("receptor_esc", "approved_receptor")]
names(leuk_gene) <- c("receptor", "gene_symbol")
write.table(leuk_gene, file = "leuk_hits_gene_symbol.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
me_gene <- merge(harmonized_ids, me, by.x = "receptor_esc", by.y = "var")
me_gene <- me_gene[, names(me_gene) %in% c("receptor_esc", "approved_receptor")]
names(me_gene) <- c("receptor", "gene_symbol")
write.table(me_gene, file = "me_hits_gene_symbol.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
colon_gene <- merge(harmonized_ids, colon, by.x = "receptor_esc", by.y = "var")
colon_gene <- colon_gene[, names(colon_gene) %in% c("receptor_esc", "approved_receptor")]
names(colon_gene) <- c("receptor", "gene_symbol")
write.table(colon_gene, file = "colon_hits_gene_symbol.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
re_gene <- merge(harmonized_ids, re, by.x = "receptor_esc", by.y = "var")
re_gene <- re_gene[, names(re_gene) %in% c("receptor_esc", "approved_receptor")]
names(re_gene) <- c("receptor", "gene_symbol")
write.table(re_gene, file = "re_hits_gene_symbol.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
cns_gene <- merge(harmonized_ids, cns, by.x = "receptor_esc", by.y = "var")
cns_gene <- cns_gene[, names(cns_gene) %in% c("receptor_esc", "approved_receptor")]
names(cns_gene) <- c("receptor", "gene_symbol")
write.table(cns_gene, file = "cns_hits_gene_symbol.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"))
save.image("mcia_April2022_final.Rdata")
