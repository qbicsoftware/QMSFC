##BiocManager and r were previously updated to 3.12 AND 4.0.5, respectively.
##
rm(list = ls(all = TRUE)); graphics.off()
path <- getwd(); setwd(path)
path
setwd(path)
#load packages and functions, installation of some of them is quite time consuming
#e.g. devtools, pca3d and proteus
#To install proteus you might need rmarkdown and devtools if not yet installed
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!require("rmarkdown")){
BiocManager::install("rmarkdown")
library("rmarkdown")
}
if (!require("devtools")){
BiocManager::install("devtools")
library("devtools")
}
if (!require("proteus")){
#In order to run examples or vignette code,
#additional packages with example data need to be installed:
devtools::install_github("bartongroup/proteusLabelFree")
devtools::install_github("bartongroup/proteusTMT")
devtools::install_github("bartongroup/proteusSILAC")
devtools::install_github("bartongroup/Proteus",
build_opts= c("--no-resave-data", "--no-manual"), build_vignettes=FALSE)
library("proteus")
}
if (!require("limma")){
BiocManager::install("limma")
library("limma")
}
if (!require("dendextend")){
BiocManager::install("dendextend")
library("dendextend")
}
if (!require("ggplot2")){
BiocManager::install("ggplot2")
library("ggplot2")
}
if (!require("reshape")){
BiocManager::install("reshape")
library("reshape")
}
if (!require("pca3d")){
BiocManager::install("pca3d")
library("pca3d")
}
if (!require("rgl")){
BiocManager::install("rgl")
library("rgl")
}
if (!require("biomaRt")){
BiocManager::install("biomaRt")
library("biomaRt")
}
if (!require("gplots")){
BiocManager::install("gplots")
library("gplots")
}
if (!require("genefilter")){
BiocManager::install("genefilter")
library("genefilter")
}
if (!require("RColorBrewer")){
BiocManager::install("RColorBrewer")
library("RColorBrewer")
}
if (!require("EnhancedVolcano")){
BiocManager::install("EnhancedVolcano")
library("EnhancedVolcano")
}
if (!require("xtable")){
BiocManager::install("xtable")
library("xtable")
}
#begin main analysis
mt <- data.frame(norms=c("p1n <- normalizeData(p1,norm.fun = normalizeMedian)",
"p1n <- normalizeData(p1,norm.fun = normalizeQuantiles)"),
filt = c(0,0,2,2,6,6))
mt$norms <- as.character(mt$norms)
mt$filt <- as.character(mt$filt)
k <- dim(mt)[1]
k=2  #run on quantile data only
###
ki=k
print(ki)
#prepare folders
wd = "results"
tmp = "tmp"
system(paste("rm -rf ",wd,sep = ""))
dir.create(wd)
dir.create(paste(wd,tmp,sep = "/"))
#file.copy("Q0985_sample_preparations_2_merged_Bx.txt",to = wd)
file.copy("proteinGroups_SILAC.txt",to = wd)
file.copy("function.R",to = wd)
file.copy("QBF01.R", to = wd)
#   if (class(ensembl)=="try-error") {
#     cat("ERROR1: ", ensembl, "\n")
#     Sys.sleep(1)
#     print("reconnecting...")
#     bo <- bo+1
#     print(bo)
#   } else
#     break
# }
# save(list=c("ensembl"), file="ensembl.Rdata")
file.copy("ensembl.Rdata",to = wd)
#load functions file
source(paste(wd,"/function.R",sep = ""))
##Experimental Design initially included 2 technical replicates that afterwards were combined for the analysis
##We used the QBiC codes corresponding to the first replicate of the peptides in the "Q0985_sample_preparations_20210430094501.tsv"
##BiocManager and r were previously updated to 3.12 AND 4.0.5, respectively.
##
rm(list = ls(all = TRUE)); graphics.off()
path <- getwd(); setwd(path)
path
setwd(path)
#load packages and functions, installation of some of them is quite time consuming
#e.g. devtools, pca3d and proteus
#To install proteus you might need rmarkdown and devtools if not yet installed
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!require("rmarkdown")){
BiocManager::install("rmarkdown")
library("rmarkdown")
}
if (!require("devtools")){
BiocManager::install("devtools")
library("devtools")
}
if (!require("proteus")){
#In order to run examples or vignette code,
#additional packages with example data need to be installed:
devtools::install_github("bartongroup/proteusLabelFree")
devtools::install_github("bartongroup/proteusTMT")
devtools::install_github("bartongroup/proteusSILAC")
devtools::install_github("bartongroup/Proteus",
build_opts= c("--no-resave-data", "--no-manual"), build_vignettes=FALSE)
library("proteus")
}
if (!require("limma")){
BiocManager::install("limma")
library("limma")
}
if (!require("dendextend")){
BiocManager::install("dendextend")
library("dendextend")
}
if (!require("ggplot2")){
BiocManager::install("ggplot2")
library("ggplot2")
}
if (!require("reshape")){
BiocManager::install("reshape")
library("reshape")
}
if (!require("pca3d")){
BiocManager::install("pca3d")
library("pca3d")
}
if (!require("rgl")){
BiocManager::install("rgl")
library("rgl")
}
if (!require("biomaRt")){
BiocManager::install("biomaRt")
library("biomaRt")
}
if (!require("gplots")){
BiocManager::install("gplots")
library("gplots")
}
if (!require("genefilter")){
BiocManager::install("genefilter")
library("genefilter")
}
if (!require("RColorBrewer")){
BiocManager::install("RColorBrewer")
library("RColorBrewer")
}
if (!require("EnhancedVolcano")){
BiocManager::install("EnhancedVolcano")
library("EnhancedVolcano")
}
if (!require("xtable")){
BiocManager::install("xtable")
library("xtable")
}
#begin main analysis
mt <- data.frame(norms=c("p1n <- normalizeData(p1,norm.fun = normalizeMedian)",
"p1n <- normalizeData(p1,norm.fun = normalizeQuantiles)"),
filt = c(0,0,2,2,6,6))
##Experimental Design initially included 2 technical replicates that afterwards were combined for the analysis
##We used the QBiC codes corresponding to the first replicate of the peptides in the "Q0985_sample_preparations_20210430094501.tsv"
##BiocManager and r were previously updated to 3.12 AND 4.0.5, respectively.
##
rm(list = ls(all = TRUE)); graphics.off()
path <- getwd(); setwd(path)
path
calc_max_edges <- function(num_nodes) {
if (num_nodes == 0) {
return(0)
}
value <- 0
for (i in seq(1, num_nodes)) {
value <- value + i - 1
}
return(2*value + num_nodes)
}
options(digits = 22)
print(calc_max_edges(3))
print(calc_max_edges(4))
# print(calc_max_edges(3))
print(calc_max_edges(35))
print(calc_max_edges(377123))
print(calc_max_edges(200000))
4e+10
4e+1
4e+4
print(calc_max_edges(2000000)) #4e+10
library(tidyverse)
library(ggbeeswarm)
library(knitr)
library(gridExtra)
args <- commandArgs(trailingOnly = T)
odgi_extract_csv <- args[1]
vg_chunk_csv <- args[2]
extract_pdf <- args[3]
extract_csv <- args[4]
odgi_extract_csv <- "/home/heumos/git/odgi-paper/data/odgi_extract_time.csv"
odgi_extract <- read.delim(odgi_extract_csv, sep = ",", as.is = T, header = F, stringsAsFactors = F, strip.white = T)
colnames(odgi_extract) <- c("threads", "haps", "run", "time", "memory")
# time is in seconds
# memory is in kilobytes
odgi_extract$tool <- "odgi extract"
summary(odgi_extract)
vg_chunk_csv <- "/home/heumos/git/odgi-paper/data/vg_chunk_time.csv"
vg_chunk <- read.delim(vg_chunk_csv, sep = ",", as.is = T, header = F, stringsAsFactors = F, strip.white = T)
colnames(vg_chunk) <- c("threads", "haps", "run", "time", "memory")
vg_chunk$tool <- "vg chunk"
summary(vg_chunk)
extract <- rbind(odgi_extract, vg_chunk)
extract$threads <- factor(extract$threads, levels=unique(extract$threads))
extract$haps <- factor(extract$haps, levels=unique(extract$haps))
# extract$memory <- factor(extract$memory, levels=unique(extract$memory))
extract$memory <- as.numeric(extract$memory)/1000000
extract_64haps <- extract[extract$haps == 64,]
extract_64haps_m <- aggregate(cbind(memory,time) ~threads+haps+tool, data=extract_64haps, FUN=mean)
extract_16threads <- extract[extract$threads == 16,]
extract_16threads_m <- aggregate(cbind(memory,time) ~threads+haps+tool, data=extract_16threads, FUN=mean)
dodge <- position_dodge(width = 0.0)
et_p_t <- ggplot(extract_64haps_m, aes(x=threads, y=time, fill=tool, color = tool)) +
geom_violin(position = dodge) +
#geom_beeswarm(size=0.5) +
labs(x = "number of threads", y = "time in seconds") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
et_p_t
View(extract_64haps_m)
et_p_t <- ggplot(extract_64haps_m, aes(x=threads, y=time, fill=tool, color = tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of threads", y = "time in seconds") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
et_p_t
et_p_t <- ggplot(extract_64haps_m, aes(x=threads, y=time, fill=tool, color = tool, group=tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of threads", y = "time in seconds") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
et_p_t
eh_p_t <- ggplot(extract_16threads_m, aes(x=haps, y=time, fill=tool, color = tool, group=tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "time in seconds") +
expand_limits(x = 0, y = 0) + theme(legend.direction = "horizontal") +
labs(color = "tool   ") +
labs(fill = "tool   ") +
theme(legend.title = element_text(size=15)) +
theme(legend.key.size = unit(0.4, 'cm'))
eh_p_t
eh_p_t <- ggplot(extract_16threads_m, aes(x=haps, y=time, fill=tool, color = tool, group=tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "time in seconds") +
expand_limits(x = 0, y = 0) + theme(legend.direction = "horizontal") +
labs(color = "tool   ") +
labs(fill = "tool   ") +
theme(legend.title = element_text(size=15)) +
theme(legend.key.size = unit(1, 'cm'))
eh_p_t
eh_p_t <- ggplot(extract_16threads_m, aes(x=haps, y=time, fill=tool, color = tool, group=tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "time in seconds") +
expand_limits(x = 0, y = 0) + theme(legend.direction = "horizontal") +
labs(color = "tool   ") +
labs(fill = "tool   ") +
theme(legend.title = element_text(size=15)) +
theme(legend.key.size = unit(0.4, 'cm'))
eh_p_t
get_legend <- function(a.gplot) {
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(eh_p_t)
eh_p_t <- eh_p_t + theme(legend.position = "none")
# collapse memory by run and take the mean
et_p_m <- ggplot(extract_64haps_m, aes(x=threads, y=memory, fill=tool, color = tool, group = tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of threads", y = "memory in gigabytes") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
et_p_m
eh_p_m <- ggplot(extract_16threads_m, aes(x=haps, y=memory, fill=tool, color = tool, group = tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "memory in gigabytes") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
eh_p_m
grid.arrange(arrangeGrob(et_p_t, eh_p_t, nrow = 1), arrangeGrob(et_p_m, eh_p_m, nrow = 1), legend, nrow = 3, heights = c(1,1,0.1))
library(tidyverse)
library(ggbeeswarm)
library(knitr)
library(gridExtra)
library(R.devices)
args <- commandArgs(trailingOnly = T)
odgi_build_csv <- args[1]
vg_convert_csv <- args[2]
build_pdf <- args[3]
build_csv <- args[4]
#odgi_build_csv <- "/home/heumos/git/odgi-paper/data/odgi_build_threads_haps_time.csv"
odgi_build <- read.delim(odgi_build_csv, sep = ",", as.is = T, header = F, stringsAsFactors = F, strip.white = T)
colnames(odgi_build) <- c("threads", "haps", "run", "time", "memory")
# time is in seconds
# memory is in kilobytes
odgi_build$tool <- "odgi build"
odgi_build_csv <- "/home/heumos/git/odgi-paper/data/odgi_build_threads_haps_time.csv"
odgi_build <- read.delim(odgi_build_csv, sep = ",", as.is = T, header = F, stringsAsFactors = F, strip.white = T)
colnames(odgi_build) <- c("threads", "haps", "run", "time", "memory")
# time is in seconds
# memory is in kilobytes
odgi_build$tool <- "odgi build"
summary(odgi_build)
#vg_convert_csv <- "/home/heumos/git/odgi-paper/data/vg_convert_threads_haps_time.csv"
vg_convert <- read.delim(vg_convert_csv, sep = ",", as.is = T, header = F, stringsAsFactors = F, strip.white = T)
colnames(vg_convert) <- c("threads", "haps", "run", "time", "memory")
vg_convert$tool <- "vg convert"
summary(vg_convert)
vg_convert_csv <- "/home/heumos/git/odgi-paper/data/vg_convert_threads_haps_time.csv"
#vg_convert_csv <- "/home/heumos/git/odgi-paper/data/vg_convert_threads_haps_time.csv"
vg_convert <- read.delim(vg_convert_csv, sep = ",", as.is = T, header = F, stringsAsFactors = F, strip.white = T)
colnames(vg_convert) <- c("threads", "haps", "run", "time", "memory")
vg_convert$tool <- "vg convert"
summary(vg_convert)
construct <- rbind(odgi_build, vg_convert)
construct$threads <- factor(construct$threads, levels=unique(construct$threads))
construct$haps <- factor(construct$haps, levels=unique(construct$haps))
# construct$memory <- factor(construct$memory, levels=unique(construct$memory))
construct$memory <- as.numeric(construct$memory)/1000000
construct_64haps <- construct[construct$haps == 64,]
construct_64haps_m <- aggregate(cbind(memory,time) ~threads+haps+tool, data=construct_64haps, FUN=mean)
construct_16threads <- construct[construct$threads == 16,]
construct_16threads_m <- aggregate(cbind(memory,time) ~threads+haps+tool, data=construct_16threads, FUN=mean)
ct_p_t <- ggplot(construct_64haps, aes(x=threads, y=time, fill=tool, color = tool, group=tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of threads", y = "time in seconds") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
ct_p_t
ct_p_t <- ggplot(construct_64haps_m, aes(x=threads, y=time, fill=tool, color = tool, group=tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of threads", y = "time in seconds") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
ct_p_t
ch_p_t <- ggplot(construct_16threads,_m aes(x=haps, y=time, fill=tool, color = tool)) +
geom_violin(position = dodge) +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "time in seconds") +
expand_limits(x = 0, y = 0) + theme(legend.direction = "horizontal") +
labs(color = "tool   ") +
labs(fill = "tool   ") +
theme(legend.title = element_text(size=15)) +
theme(legend.key.size = unit(0.4, 'cm'))
ch_p_t
ch_p_t <- ggplot(construct_16threads,_m aes(x=haps, y=time, fill=tool, color = tool)) +
geom_violin(position = dodge) +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "time in seconds") +
expand_limits(x = 0, y = 0) + theme(legend.direction = "horizontal") +
labs(color = "tool   ") +
labs(fill = "tool   ") +
theme(legend.title = element_text(size=15)) +
theme(legend.key.size = unit(0.4, 'cm'))
ch_p_t <- ggplot(construct_16threads_m,aes(x=haps, y=time, fill=tool, color = tool, group=tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "time in seconds") +
expand_limits(x = 0, y = 0) + theme(legend.direction = "horizontal") +
labs(color = "tool   ") +
labs(fill = "tool   ") +
theme(legend.title = element_text(size=15)) +
theme(legend.key.size = unit(0.4, 'cm'))
ch_p_t
get_legend <- function(a.gplot) {
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(ch_p_t)
ch_p_t <- ch_p_t + theme(legend.position = "none")
# collapse memory by run and take the mean
ct_p_m <- ggplot(construct_64haps_m, aes(x=threads, y=memory, fill=tool, color = tool, group = tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of threads", y = "memory in gigabytes") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
ch_p_m <- ggplot(construct_16threads_m, aes(x=haps, y=memory, fill=tool, color = tool, group = tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "memory in gigabytes") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
ct_p_m
ch_p_m <- ggplot(construct_16threads_m, aes(x=haps, y=memory, fill=tool, color = tool, group = tool)) +
geom_point() + geom_line() +
#geom_beeswarm(size=0.5) +
labs(x = "number of haplotypes", y = "memory in gigabytes") +
expand_limits(x = 0, y = 0) +
theme(legend.position = "none")
ch_p_m
grid.arrange(arrangeGrob(ct_p_t, ch_p_t, nrow = 1), arrangeGrob(ct_p_m, ch_p_m, nrow = 1), legend, nrow = 3, heights = c(1,1,0.1))
rm(list = ls(all = TRUE)) # clear all  variables
graphics.off()
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
wd = "/home/heumos/QBiC/Marius/simon/sandra/Curate_Px_April2021/"
setwd(wd)
lutp = read.table('prot_nci60_mapping.csv',header=TRUE,sep=",", as.is = TRUE, quote="");
idx = duplicated(lutp$Pnumber)
lutp = lutp[!idx,]
d1=read.table('proteinGroups_esc.txt',header=TRUE,sep="\t", as.is = TRUE, quote="");
names(d1) <- gsub("\\.","_", names(d1))
names(d1) <- gsub("__","_", names(d1))
names(d1) <- gsub("__","_", names(d1))
nm=names(d1)
idx = grep("LFQ", names(d1))
nm = names(d1[1,idx])
tmp = sapply(strsplit(nm,"\\_"), "[[",3)
length(intersect(tmp, unique(lutp$Pnumber)))
d2  =d1 [,c(1,idx)]
names(d2)
row.names(d2) = d2$Protein_IDs
d2$Protein_IDs = NULL
head(d2)
names(d2) <- gsub("\\LFQ_intensity_","", names(d2))
head(d2)
## remove all proteins with the "REV_" tag
idx = grep("REV_",  rownames(d2))
d2 = d2[-idx,]
## remove all proteins with the "CON_" tag in it
idx = grep("CON_", rownames(d2))
d2 = d2[-idx,]
head(lutp)
lutp$cell2 = gsub("-", "",lutp$Cellline)
lutp$cell2 = gsub(" ", "",lutp$cell2)
lutp$cell2 = toupper(lutp$cell2)
lutp <- lutp[lutp$Dataset == "full proteome of 59 cell lines",]
head(lutp)
lutp[lutp$cell2 == "MCF7/ADRR",]$cell2 <- "MCF7ADR"
lutp$cell2[which(lutp$cell2 == "786O")] <- "7860"
`%notin%` <- function(x,y) !(x %in% y)
## SR is 2x in the data set -> P001388, P001750
sum(d2$P001388 == 0) # 4536 --> 514 # 4803 --> 525
sum(d2$P001750 == 0) # 5331 # 5597 --> 517 instead of 525
## HOP-92 is 2x in the data set -> P003204, P003364
sum(d2$P003204 == 0) # 4552 --> 514  # 4792 --> 525
sum(d2$P003364 == 0) # 4693 # 4941 --> 525
nin =  c("P001750","P003364") # masking these data sets for later removal
library(tidyverse)
install.packages("stringi")
setRepositories()
package ‘stringi’ is not available (for R version 3.3.2)
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
ap <- available.packages()
install.packages("stringi", dependencies=TRUE, repos='http://cran.rstudio.com/')
